# Cron job to auto update listed assets
name: üì° Assets auto update

# Controls when the workflow will run
on:
  # Nightly - running at noon UTC
  schedule:
    - cron: '0 12 * * *'

  # Allow manual trigger
  workflow_dispatch:

# Jobs
jobs:
  assets_auto_update:
    runs-on: ubuntu-22.04
    outputs:
      RELEASE_VERSION: ${{ steps.push.outputs.RELEASE_VERSION }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è NodeJS setup
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üîß Install dependencies and build
        run: npm ci && npm run build
      
      - name: üì° Fetch assets updates
        run: npm run update-assets

      - name: ü§ñ Update remote with changes
        shell: bash
        id: push
        run: |

          # Set bot
          echo "[$(date +"%T")] [DEBUG] Setting bot";
          git config --local user.email "github-actions[bot]@users.noreply.github.com";
          git config --local user.name "github-actions[bot]";
          
          # Check for changes
          echo "[$(date +"%T")] [DEBUG] Checking for changes";
          git add assets.json;
          status=$(git status);

          if [[ $status =~ "Changes to be committed" ]]; then
            echo "[$(date +"%T")] [DEBUG] New changes detected";
            
            # Calculate new tag version
            echo "[$(date +"%T")] [DEBUG] Calculating new version from the tag $(git describe --tags)";
            last_version=$(git describe --tags | sed -r -n 's/v([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*/\1/p');
            minor="${last_version##*.}";
            major="${last_version%.*}";
            new_version="$major.$((minor + 1))";
            echo "[$(date +"%T")] [DEBUG] New version - v$new_version";
            
            # Update package.json
            echo "[$(date +"%T")] [DEBUG] Updating package.json";
            package_json_content=$(sed -r "s/$last_version/$new_version/" < package.json);
            echo "$package_json_content" > package.json;
            git diff package.json;

            # Update CHANGELOG.md
            echo "[$(date +"%T")] [DEBUG] Updating CHANGELOG.md";
            if grep -q "## \[$last_version\]" <CHANGELOG.md; then
              last_but_one_release_line=$(grep -n -m 2 "## \[" <CHANGELOG.md | tail -n 1 | sed -r 's/([[:digit:]]*):.*/\1/g')
              changelog_release_only_content=$(head -n $((last_but_one_release_line - 1)) CHANGELOG.md)
              if [[ "${changelog_release_only_content}" =~ "### Changed" ]]; then
                if [[ ! "${changelog_release_only_content}" =~ "- Update assets list" ]]; then
                  changelog_release_only_content=$(echo "${changelog_release_only_content}" | sed ':a;N;$!ba;s/\n/Áà®/g' | sed -r "s/### ChangedÁà®+/### ChangedÁà®Áà®- Update assets listÁà®/" | sed 's/Áà®/\n/g')
                fi
              else
                changelog_release_only_content="$(printf "%s\n\n%s\n\n%s" "${changelog_release_only_content}" "### Changed" "- Update assets list")"
              fi
              changelog_content="$(printf "%s\n%s" "${changelog_release_only_content}" "$(tail -n +"$((last_but_one_release_line - 1))" CHANGELOG.md)")"
              changelog_content=$(echo "${changelog_content}" | sed -r "s/## \[$last_version\].*/## \[$last_version\] - \[$new_version\] - $(date '+%Y-%m-%d')/")
              echo "$changelog_content" >CHANGELOG.md
            elif grep -q "## .* - \[$last_version\]" <CHANGELOG.md; then
              changelog_content=$(sed -r "s/(## .* - )\[$last_version\]/\1\[$new_version\]/" <CHANGELOG.md)
              echo "$changelog_content" >CHANGELOG.md
            fi
            git diff CHANGELOG.md;

            # Submit the changes creating a new tag
            echo "[$(date +"%T")] [DEBUG] Submitting changes";
            git add package.json CHANGELOG.md;
            git commit -m "chore: update assets list";
            git tag "v$new_version";
            git push -u origin main --tags;

            # Set flag to trigger the release
            echo "RELEASE_VERSION=$new_version" >> $GITHUB_OUTPUT
          else
            echo "[$(date +"%T")] [DEBUG] No changes detected";
          fi

          echo "[$(date +"%T")] [DEBUG] Done";

  # Call CI, if a new release version was set
  ci-check:
    name: üîÑ CI
    needs: assets_auto_update
    if: ${{ needs.assets_auto_update.outputs.RELEASE_VERSION }}
    uses: ./.github/workflows/ci.yml
    secrets: inherit
    with:
      # Skip crawler tests, since the crawler just ran
      skip_crawler_test: true

  # Create a release, if a new release version was set and the CI passed
  make_release:
    name: üéÅ Make release
    needs: [ assets_auto_update, ci-check ]
    if: ${{ needs.assets_auto_update.outputs.RELEASE_VERSION }}
    uses: ./.github/workflows/release.yml
    secrets: inherit
    with:
      release_version: "v${{ needs.assets_auto_update.outputs.RELEASE_VERSION }}"

# EOF
